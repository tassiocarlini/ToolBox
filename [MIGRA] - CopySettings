SET NOCOUNT ON;

-- ********************************************************************************
-- ** 1. DEFINA O NOME DO BANCO DE DADOS (OPCIONAL)                     **
-- ** Se deixar N'' ou NULL, o script rodará para TODOS os bancos (ID maior 5) **
-- ********************************************************************************
DECLARE @DatabaseName SYSNAME = N''; -- <--- Deixe N'' ou NULL para todos os bancos
-- ********************************************************************************


-- Variável principal que armazenará todo o script de saída
DECLARE @FullScript NVARCHAR(MAX) = N'';
DECLARE @TargetScope NVARCHAR(255) = N''; -- Variável para o cabeçalho

-- Define o escopo para o cabeçalho
IF @DatabaseName IS NOT NULL AND @DatabaseName != N''
    SET @TargetScope = N'Database: ' + QUOTENAME(@DatabaseName);
ELSE
    SET @TargetScope = N'Database: TODOS OS BANCOS DE USUÁRIO (ID maior 5)'; -- <--- ATUALIZADO AQUI


-- =================================================================================
-- CABEÇALHO DO SCRIPT GERADO
-- =================================================================================
SET @FullScript += N'/*==================================================================*/' + CHAR(13) + CHAR(10);
SET @FullScript += N'/* SCRIPT DE CONFIGURAÇÃO GERADO AUTOMATICAMENTE            */' + CHAR(13) + CHAR(10);
SET @FullScript += N'/* Origem: ' + @@SERVERNAME + '                                    */' + CHAR(13) + CHAR(10);
SET @FullScript += N'/* ' + @TargetScope + '                                   */' + CHAR(13) + CHAR(10);
SET @FullScript += N'/* Gerado em: ' + CONVERT(NVARCHAR, GETDATE(), 120) + '                    */' + CHAR(13) + CHAR(10);
SET @FullScript += N'/*==================================================================*/' + CHAR(13) + CHAR(10);
SET @FullScript += N'SET NOCOUNT ON;' + CHAR(13) + CHAR(10);
SET @FullScript += N'USE [master];' + CHAR(13) + CHAR(10);
SET @FullScript += N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);


-- =================================================================================
-- PARTE 1: CONFIGURAÇÕES DE INSTÂNCIA (sp_configure)
-- =================================================================================
SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
SET @FullScript += N'/* 1. CONFIGURAÇÕES DE INSTÂNCIA (sp_configure)    */' + CHAR(13) + CHAR(10);
SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
SET @FullScript += N'EXEC sp_configure ''show advanced options'', 1; RECONFIGURE;' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);

-- Concatena todos os sp_configure em uma única string
SELECT @FullScript += N'EXEC sp_configure ''' + name + N''', ' + CAST(value_in_use AS NVARCHAR(128)) + N';' + CHAR(13) + CHAR(10)
FROM sys.configurations
WHERE name IN (
    'max degree of parallelism',
    'cost threshold for parallelism',
    'network packet size (B)', -- Corrigido
    'max server memory (MB)',
    'min server memory (MB)',
    'optimize for ad hoc workloads',
    'backup compression default',
    'remote admin connections',
    'fill factor (%)',
    'blocked process threshold (s)'
);

SET @FullScript += CHAR(13) + CHAR(10);
SET @FullScript += N'RECONFIGURE WITH OVERRIDE;' + CHAR(13) + CHAR(10);
SET @FullScript += N'GO' + CHAR(13) + CHAR(10);
SET @FullScript += N'EXEC sp_configure ''show advanced options'', 0; RECONFIGURE;' + CHAR(13) + CHAR(10);
SET @FullScript += N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);


-- =================================================================================
-- INÍCIO DA LÓGICA CONDICIONAL (Banco Único vs. Todos os Bancos)
-- =================================================================================

IF @DatabaseName IS NOT NULL AND @DatabaseName != N''
BEGIN
    -- *************************************************
    -- MODO: BANCO DE DADOS ÚNICO
    -- *************************************************

    -- Verifica se o banco de dados único existe
    IF DB_ID(@DatabaseName) IS NULL
    BEGIN
        SET @FullScript += N'/* ERRO: O banco de dados ' + QUOTENAME(@DatabaseName) + N' não foi encontrado na origem. Nenhuma config de DB foi gerada. */';
    END
    ELSE
    BEGIN
        -- =================================================================================
        -- PARTE 2: CONFIGURAÇÕES DE DATABASE (Único)
        -- =================================================================================
        SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
        SET @FullScript += N'/* 2. CONFIGURAÇÕES DE DATABASE (ALTER DATABASE)   */' + CHAR(13) + CHAR(10);
        SET @FullScript += N'/* DATABASE: ' + QUOTENAME(@DatabaseName) + '                       */' + CHAR(13) + CHAR(10);
        SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
        SET @FullScript += N'USE [master];' + CHAR(13) + CHAR(10);
        SET @FullScript += N'GO' + CHAR(13) + CHAR(10);

        SELECT 
            @FullScript += N'/* --- ATENÇÃO: Verifique se o Collation do database destino é o mesmo ---*/' + CHAR(13) + CHAR(10)
            + N'/* ' + name + N' Collation de Origem: ' + collation_name + N' */' + CHAR(13) + CHAR(10)
        FROM sys.databases 
        WHERE name = @DatabaseName;

        SELECT 
            @FullScript += N'ALTER DATABASE ' + QUOTENAME(name) + N' SET COMPATIBILITY_LEVEL = ' + CAST(compatibility_level AS VARCHAR(10)) + N';' + CHAR(13) + CHAR(10)
            -- Recovery Model Removido
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET PAGE_VERIFY ' + page_verify_option_desc + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ' + user_access_desc + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ' + IIF(is_read_only = 1, N'READ_ONLY', N'READ_WRITE') + N';' + CHAR(13) + CHAR(10)
            + CHAR(13) + CHAR(10)
            + N'/* -- Estatísticas e ANSI -- */' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET AUTO_CREATE_STATISTICS ' + IIF(is_auto_create_stats_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET AUTO_UPDATE_STATISTICS ' + IIF(is_auto_update_stats_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET AUTO_UPDATE_STATISTICS_ASYNC ' + IIF(is_auto_update_stats_async_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ANSI_NULLS ' + IIF(is_ansi_nulls_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ANSI_PADDING ' + IIF(is_ansi_padding_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ANSI_WARNINGS ' + IIF(is_ansi_warnings_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET QUOTED_IDENTIFIER ' + IIF(is_quoted_identifier_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + CHAR(13) + CHAR(10)
            + N'/* -- Concorrência e Performance -- */' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET PARAMETERIZATION ' + IIF(is_parameterization_forced = 1, N'FORCED', N'SIMPLE') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET READ_COMMITTED_SNAPSHOT ' + IIF(is_read_committed_snapshot_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ALLOW_SNAPSHOT_ISOLATION ' + IIF(snapshot_isolation_state_desc = 'ON', N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
            + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET QUERY_STORE = ' + IIF(is_query_store_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        FROM sys.databases
        WHERE name = @DatabaseName;

        SET @FullScript += N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);

        -- =================================================================================
        -- PARTE 3: CONFIGURAÇÕES DE ESCOPO DE DATABASE (Único)
        -- =================================================================================
        SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
        SET @FullScript += N'/* 3. CONFIGS DE ESCOPO DE DB (SCOPED CONFIG)    */' + CHAR(13) + CHAR(10);
        SET @FullScript += N'/* DATABASE: ' + QUOTENAME(@DatabaseName) + '                       */' + CHAR(13) + CHAR(10);
        SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
        SET @FullScript += N'USE ' + QUOTENAME(@DatabaseName) + ';' + CHAR(13) + CHAR(10);
        SET @FullScript += N'GO' + CHAR(13) + CHAR(10);

        DECLARE @scopedSqlXml NVARCHAR(MAX) = N'';
        DECLARE @scopedQueryXml NVARCHAR(MAX) = N'
        USE ' + QUOTENAME(@DatabaseName) + N';
        SELECT @sqlOut = (
            SELECT (
                SELECT N''ALTER DATABASE SCOPED CONFIGURATION SET '' + name + N'' = '' +
                    CASE
                        WHEN name LIKE ''%_FOR_SECONDARY'' 
                        THEN CASE WHEN SQL_VARIANT_PROPERTY(value, ''BaseType'') IN (''int'', ''tinyint'', ''smallint'') THEN IIF(CAST(value AS INT) = 1, N''PRIMARY'', N''OFF'') ELSE N'''''''' + CAST(value AS NVARCHAR(MAX)) + N'''''''' END
                        WHEN SQL_VARIANT_PROPERTY(value, ''BaseType'') IN (''int'', ''tinyint'', ''smallint'', ''bigint'', ''numeric'', ''decimal'')
                        THEN CAST(value AS NVARCHAR(128))
                        WHEN SQL_VARIANT_PROPERTY(value, ''BaseType'') IN (''char'', ''varchar'', ''nchar'', ''nvarchar'')
                        THEN N'''''''' + CAST(value AS NVARCHAR(MAX)) + N''''''''
                        ELSE N'''''''' + CAST(value AS NVARCHAR(MAX)) + N''''''''
                    END + N'';'' + NCHAR(13) + NCHAR(10)
                FROM sys.database_scoped_configurations
                FOR XML PATH(N''''), TYPE
            ).value(N''.[1]'', N''NVARCHAR(MAX)'')
        );';

        IF EXISTS (SELECT 1 FROM sys.all_objects WHERE name = 'database_scoped_configurations')
        BEGIN
            EXEC sp_executesql @scopedQueryXml, N'@sqlOut NVARCHAR(MAX) OUTPUT', @sqlOut = @scopedSqlXml OUTPUT;
            SET @FullScript += ISNULL(@scopedSqlXml, N'/* Nenhuma config de escopo encontrada ou SQL < 2016 */');
        END
        ELSE
        BEGIN
            SET @FullScript += N'/* AVISO: sys.database_scoped_configurations não existe nesta versão do SQL (Origem < 2016). */' + CHAR(13) + CHAR(10);
        END

        SET @FullScript += N'GO' + CHAR(13) + CHAR(10);
        SET @FullScript += N'USE [master];' + CHAR(13) + CHAR(10);
        SET @FullScript += N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);
    END;
END
ELSE
BEGIN
    -- *************************************************
    -- MODO: TODOS OS BANCOS DE DADOS (ID > 5)
    -- *************************************************

    -- =================================================================================
    -- PARTE 2: CONFIGURAÇÕES DE DATABASE (Loop)
    -- =================================================================================
    SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
    SET @FullScript += N'/* 2. CONFIGURAÇÕES DE DATABASE (ALTER DATABASE)   */' + CHAR(13) + CHAR(10);
    SET @FullScript += N'/* Aplicando a TODOS os bancos de usuário (ID > 5)  */' + CHAR(13) + CHAR(10); -- <--- ATUALIZADO AQUI
    SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
    SET @FullScript += N'USE [master];' + CHAR(13) + CHAR(10);
    SET @FullScript += N'GO' + CHAR(13) + CHAR(10);

    -- Gera os comandos ALTER DATABASE para CADA banco
    SELECT 
        @FullScript += N'PRINT N''Aplicando configs de DB para ' + QUOTENAME(name) + ''';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET COMPATIBILITY_LEVEL = ' + CAST(compatibility_level AS VARCHAR(10)) + N';' + CHAR(13) + CHAR(10)
        -- Recovery Model Removido
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET PAGE_VERIFY ' + page_verify_option_desc + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ' + user_access_desc + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ' + IIF(is_read_only = 1, N'READ_ONLY', N'READ_WRITE') + N';' + CHAR(13) + CHAR(10)
        + N'/* -- Estatísticas e ANSI para ' + QUOTENAME(name) + ' -- */' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET AUTO_CREATE_STATISTICS ' + IIF(is_auto_create_stats_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET AUTO_UPDATE_STATISTICS ' + IIF(is_auto_update_stats_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET AUTO_UPDATE_STATISTICS_ASYNC ' + IIF(is_auto_update_stats_async_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ANSI_NULLS ' + IIF(is_ansi_nulls_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ANSI_PADDING ' + IIF(is_ansi_padding_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ANSI_WARNINGS ' + IIF(is_ansi_warnings_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET QUOTED_IDENTIFIER ' + IIF(is_quoted_identifier_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'/* -- Concorrência e Performance para ' + QUOTENAME(name) + ' -- */' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET PARAMETERIZATION ' + IIF(is_parameterization_forced = 1, N'FORCED', N'SIMPLE') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET READ_COMMITTED_SNAPSHOT ' + IIF(is_read_committed_snapshot_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET ALLOW_SNAPSHOT_ISOLATION ' + IIF(snapshot_isolation_state_desc = 'ON', N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'ALTER DATABASE ' + QUOTENAME(name) + N' SET QUERY_STORE = ' + IIF(is_query_store_on = 1, N'ON', N'OFF') + N';' + CHAR(13) + CHAR(10)
        + N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10) -- Adiciona GO depois de cada banco
    FROM sys.databases
    WHERE database_id > 5 AND [state] = 0; -- <--- ATUALIZADO AQUI (Apenas bancos ONLINE)

    
    -- =================================================================================
    -- PARTE 3: CONFIGURAÇÕES DE ESCOPO DE DATABASE (Loop)
    -- =================================================================================
    SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
    SET @FullScript += N'/* 3. CONFIGS DE ESCOPO DE DB (SCOPED CONFIG)    */' + CHAR(13) + CHAR(10);
    SET @FullScript += N'/* Aplicando a TODOS os bancos de usuário (ID > 5)  */' + CHAR(13) + CHAR(10); -- <--- ATUALIZADO AQUI
    SET @FullScript += N'/*=================================================*/' + CHAR(13) + CHAR(10);
    SET @FullScript += N'GO' + CHAR(13) + CHAR(10);

    -- Verifica se a view existe (SQL 2016+)
    IF EXISTS (SELECT 1 FROM sys.all_objects WHERE name = 'database_scoped_configurations')
    BEGIN
        DECLARE @LoopDbName SYSNAME;
        DECLARE @scopedSqlXml_Loop NVARCHAR(MAX);
        DECLARE @scopedQueryXml_Loop NVARCHAR(MAX);

        -- Declara o cursor para iterar pelos bancos de usuário
        DECLARE db_cursor CURSOR FAST_FORWARD FOR 
        SELECT name 
        FROM sys.databases 
        WHERE database_id > 5 -- <--- ATUALIZADO AQUI
          AND [state] = 0; -- Apenas bancos ONLINE

        OPEN db_cursor;
        FETCH NEXT FROM db_cursor INTO @LoopDbName;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @scopedSqlXml_Loop = N'';
            SET @scopedQueryXml_Loop = N'
            USE ' + QUOTENAME(@LoopDbName) + N';
            SELECT @sqlOut = (
                SELECT (
                    SELECT N''ALTER DATABASE SCOPED CONFIGURATION SET '' + name + N'' = '' +
                        CASE
                            WHEN name LIKE ''%_FOR_SECONDARY'' 
                            THEN CASE WHEN SQL_VARIANT_PROPERTY(value, ''BaseType'') IN (''int'', ''tinyint'', ''smallint'') THEN IIF(CAST(value AS INT) = 1, N''PRIMARY'', N''OFF'') ELSE N'''''''' + CAST(value AS NVARCHAR(MAX)) + N'''''''' END
                            WHEN SQL_VARIANT_PROPERTY(value, ''BaseType'') IN (''int'', ''tinyint'', ''smallint'', ''bigint'', ''numeric'', ''decimal'')
                            THEN CAST(value AS NVARCHAR(128))
                            WHEN SQL_VARIANT_PROPERTY(value, ''BaseType'') IN (''char'', ''varchar'', ''nchar'', ''nvarchar'')
                            THEN N'''''''' + CAST(value AS NVARCHAR(MAX)) + N''''''''
                            ELSE N'''''''' + CAST(value AS NVARCHAR(MAX)) + N''''''''
                        END + N'';'' + NCHAR(13) + NCHAR(10)
                    FROM sys.database_scoped_configurations
                    FOR XML PATH(N''''), TYPE
                ).value(N''.[1]'', N''NVARCHAR(MAX)'')
            );';

            -- Executa o SQL dinâmico para obter as configs do banco atual
            EXEC sp_executesql @scopedQueryXml_Loop, N'@sqlOut NVARCHAR(MAX) OUTPUT', @sqlOut = @scopedSqlXml_Loop OUTPUT;

            -- Adiciona ao script principal
            SET @FullScript += N'USE ' + QUOTENAME(@LoopDbName) + ';' + CHAR(13) + CHAR(10);
            SET @FullScript += N'GO' + CHAR(13) + CHAR(10);
            SET @FullScript += N'PRINT N''Aplicando configs de escopo para ' + QUOTENAME(@LoopDbName) + ''';' + CHAR(13) + CHAR(10);
            SET @FullScript += ISNULL(@scopedSqlXml_Loop, N'/* Nenhuma config de escopo encontrada para ' + QUOTENAME(@LoopDbName) + ' */' + CHAR(13) + CHAR(10));
            SET @FullScript += N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);

            FETCH NEXT FROM db_cursor INTO @LoopDbName;
        END;

        CLOSE db_cursor;
        DEALLOCATE db_cursor;
    END
    ELSE
    BEGIN
        SET @FullScript += N'/* AVISO: sys.database_scoped_configurations não existe nesta versão do SQL (Origem < 2016). */' + CHAR(13) + CHAR(10);
    END;

    SET @FullScript += N'USE [master];' + CHAR(13) + CHAR(10);
    SET @FullScript += N'GO' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10);
END;

-- =================================================================================
-- RODAPÉ
-- =================================================================================
SET @FullScript += N'PRINT ''Script de configuração de ambiente concluído com sucesso.'';' + CHAR(13) + CHAR(10);


-- =================================================================================
-- SAÍDA FINAL (CORRIGIDA)
-- =================================================================================
SET NOCOUNT OFF;

-- Encapsula a conversão FOR XML em uma subquery e apelida o resultado (AS).
-- Isso é sintaticamente correto e força o SSMS a criar o link XML.
SELECT (SELECT @FullScript FOR XML PATH('SQL_SCRIPT'), TYPE)
AS [--- Clique_neste_LINK_AZUL_para_abrir_o_script ---];
